/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */class Solution {
        int camera = 0;
        public int minCameraCover(TreeNode root) {
            int c = minCamera(root);
            if(c == -1)camera++;
            return camera;
        }
        public int minCamera(TreeNode root) {
            if(root == null)return 0;
            
            int left = minCamera(root.left);
            int right = minCamera(root.right);
            
            if(left == -1 || right == -1){ // is node pr camera k need h : child ko jrurt h 
                camera++;
                return 1; //camera setup at this node
            }
            else if(left == 1 || right == 1){ //inme s koi 1 k pass y dono k pass camera h y fir 1 k pass camera or dusra covered h  
                return 0;
            }
            
            else return -1;//need a camera : parent ko jrurt h 
            
        }
    }
